const supabase = require("./config/database");

// Script de test pour v√©rifier les conversations
async function testConversations() {
    try {
        console.log(
            "üîç Test de la cr√©ation et r√©cup√©ration des conversations..."
        );

        // Test 1: V√©rifier l'existence des tables
        console.log("\n1. V√©rification des tables...");

        const { data: tables, error: tablesError } = await supabase
            .from("information_schema.tables")
            .select("table_name")
            .eq("table_schema", "public")
            .in("table_name", ["conversations", "conversation_participants"]);

        if (tablesError) {
            console.error(
                "‚ùå Erreur lors de la v√©rification des tables:",
                tablesError
            );
            return;
        }

        console.log(
            "‚úÖ Tables trouv√©es:",
            tables.map((t) => t.table_name)
        );

        // Test 2: V√©rifier la structure des tables
        console.log("\n2. V√©rification de la structure des tables...");

        const { data: conversationColumns, error: convError } = await supabase
            .from("information_schema.columns")
            .select("column_name, data_type")
            .eq("table_name", "conversations");

        if (convError) {
            console.error(
                "‚ùå Erreur lors de la v√©rification des colonnes:",
                convError
            );
            return;
        }

        console.log(
            "‚úÖ Colonnes de la table conversations:",
            conversationColumns
        );

        // Test 3: Tester l'insertion d'une conversation (n√©cessite un utilisateur authentifi√©)
        console.log("\n3. Test d'insertion d'une conversation...");
        console.log(
            "‚ö†Ô∏è  Pour ce test, vous devez avoir un utilisateur authentifi√©."
        );
        console.log(
            "   Utilisez Postman ou votre frontend pour tester la cr√©ation de conversations."
        );

        console.log("\n‚úÖ Tests termin√©s avec succ√®s!");
    } catch (error) {
        console.error("‚ùå Erreur lors des tests:", error);
    }
}

// Test de la connexion √† la base de donn√©es
async function testConnection() {
    try {
        console.log("üîç Test de la connexion √† la base de donn√©es...");

        const { data, error } = await supabase
            .from("users")
            .select("count")
            .single();

        if (error) {
            console.error("‚ùå Erreur de connexion:", error);
            return false;
        }

        console.log("‚úÖ Connexion √† la base de donn√©es r√©ussie");
        return true;
    } catch (error) {
        console.error("‚ùå Erreur lors du test de connexion:", error);
        return false;
    }
}

// Ex√©cuter les tests
async function runTests() {
    console.log("üöÄ D√©marrage des tests...\n");

    const connectionOk = await testConnection();
    if (!connectionOk) {
        console.log(
            "‚ùå Impossible de continuer sans connexion √† la base de donn√©es"
        );
        return;
    }

    await testConversations();

    console.log("\nüéâ Tests termin√©s!");
    console.log("\nüìã Prochaines √©tapes:");
    console.log(
        "1. Ex√©cutez le script migration_conversations.sql dans votre console Supabase"
    );
    console.log("2. Testez la cr√©ation de conversations via votre API");
    console.log(
        "3. V√©rifiez les logs du serveur pour d√©tecter d'√©ventuelles erreurs"
    );
}

// Ex√©cuter si le script est appel√© directement
if (require.main === module) {
    runTests();
}

module.exports = { testConversations, testConnection };
